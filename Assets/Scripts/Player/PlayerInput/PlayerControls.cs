//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Scripts/Player/PlayerInput/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Player/PlayerInput/PlayerControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""552e46a5-21c9-4a15-8ded-e6a2cecd80d7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b4f38f58-8614-4ce0-870f-3b3e3c1db9fc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""da4c51a0-347e-4d80-b3c2-f000649f5f28"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DisplayHealthbar"",
                    ""type"": ""Button"",
                    ""id"": ""a48e32c1-3a1f-49fc-aeb0-d11b6cf3ac7b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartPause"",
                    ""type"": ""Button"",
                    ""id"": ""120a5e85-65bb-49a5-a76c-ba542dba9f8b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3a96141b-8b44-424a-9219-fef8cd14bdfb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8795288-245a-4d6a-9af4-47d306c6cfe3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""89482074-4aee-4100-b767-86a807cfdaa7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""74d2dd83-a416-4ba5-bc0f-e4da78839c91"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a1aeb0a8-1662-47d4-8490-df0939f362f0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9b026d15-130a-4b97-a87c-f042df03c9e2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""464552f1-0f45-44a7-a9eb-f0624c3743b5"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""079ed159-810b-4654-95f6-8d8320a837db"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db28ac1b-323f-4118-b04f-484efe727ba7"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisplayHealthbar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1222b62-0296-42a5-943c-d8ca486c4e1d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisplayHealthbar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4e3af0a-ab95-4ed1-9c34-88f84cb6b742"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a3c7f4e-143f-4778-8cf8-36edec1c8e3d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Opening"",
            ""id"": ""381411d3-3bfb-4e83-917f-fe7ea4dbcb26"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""f42021f2-2825-4bde-8355-58e112ed7074"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3513f193-148a-403e-9656-2dec2a3109d4"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae8894d7-0d70-4caf-ab5e-b85ebac13b19"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""f7ac15f0-3aec-448f-a4d7-58655c0b856c"",
            ""actions"": [
                {
                    ""name"": ""StopPause"",
                    ""type"": ""Button"",
                    ""id"": ""96eba714-4648-4665-927c-61f500018a1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToMainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""11e6eb29-86c1-45f5-b67c-ac2a12692c45"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YesButton"",
                    ""type"": ""Button"",
                    ""id"": ""2aec989c-9b1f-4c5b-ba80-6356da71ecae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NoButton"",
                    ""type"": ""Button"",
                    ""id"": ""7f9504b2-9daa-41bd-9d9c-1a46fb36e017"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToInstructions"",
                    ""type"": ""Button"",
                    ""id"": ""6436cd9e-74f4-4ce5-a518-40403e268220"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackFromInstructions"",
                    ""type"": ""Button"",
                    ""id"": ""a5cac6dd-9ee4-4db9-9fe1-2e98b48f517b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe69d9d6-ae99-4880-993f-d00bcf4ce0c5"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7904aec9-2d96-4b6e-9048-4d1a66b2fdd3"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdc9cd79-6246-42ee-a91e-787a61831241"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e331a1c-b755-4415-8684-04b77a466d98"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6612b2a-333a-4727-94b6-1a44f51cd097"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YesButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4de36650-86cc-407b-85ad-e76825e85ff4"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YesButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ec7871b-e37a-411e-be0a-72164989ab72"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb50bf59-6a6b-4377-92c8-ef2efa575ae1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2952eaef-1f84-4544-aad8-ae239515c6fb"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToInstructions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2bd8830-6a0f-4968-b591-74b91739729c"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackFromInstructions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameOver"",
            ""id"": ""bf761993-9712-4e65-a304-51d350580360"",
            ""actions"": [
                {
                    ""name"": ""RestartLevel"",
                    ""type"": ""Button"",
                    ""id"": ""881324f2-8ada-4af9-afa3-f714f74d0b4f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToMainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""e0aa5478-f63c-44bd-84e4-df39a9a6f1fb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YesButton"",
                    ""type"": ""Button"",
                    ""id"": ""0ec61bc5-480c-436d-98d1-a034fcf3f0e8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NoButton"",
                    ""type"": ""Button"",
                    ""id"": ""3de49213-d0c9-4e65-b06f-9f5869a8c7b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa176aaa-12f9-48d0-baf1-4c571b7060b4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01ba55ff-8586-4997-91e8-c256bc79a142"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ba749cb-b254-4b8d-903b-b045698ec0c5"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""663019bf-07de-4f97-a914-3bdd815e6b48"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c862fdb-f582-44c0-bc89-2a6fbebb6345"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YesButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33b6b9b5-61eb-44dd-b42d-6c19f4d90116"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YesButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1738a59-5bd2-4b37-a086-26a9dcd02d6a"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d1ceadd-0df7-42d1-bffd-fd4ec50c2501"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Actions"",
            ""bindingGroup"": ""Actions"",
            ""devices"": []
        }
    ]
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_Movement = m_Actions.FindAction("Movement", throwIfNotFound: true);
        m_Actions_Attack = m_Actions.FindAction("Attack", throwIfNotFound: true);
        m_Actions_DisplayHealthbar = m_Actions.FindAction("DisplayHealthbar", throwIfNotFound: true);
        m_Actions_StartPause = m_Actions.FindAction("StartPause", throwIfNotFound: true);
        // Opening
        m_Opening = asset.FindActionMap("Opening", throwIfNotFound: true);
        m_Opening_Continue = m_Opening.FindAction("Continue", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_StopPause = m_Pause.FindAction("StopPause", throwIfNotFound: true);
        m_Pause_GoToMainMenu = m_Pause.FindAction("GoToMainMenu", throwIfNotFound: true);
        m_Pause_YesButton = m_Pause.FindAction("YesButton", throwIfNotFound: true);
        m_Pause_NoButton = m_Pause.FindAction("NoButton", throwIfNotFound: true);
        m_Pause_GoToInstructions = m_Pause.FindAction("GoToInstructions", throwIfNotFound: true);
        m_Pause_BackFromInstructions = m_Pause.FindAction("BackFromInstructions", throwIfNotFound: true);
        // GameOver
        m_GameOver = asset.FindActionMap("GameOver", throwIfNotFound: true);
        m_GameOver_RestartLevel = m_GameOver.FindAction("RestartLevel", throwIfNotFound: true);
        m_GameOver_GoToMainMenu = m_GameOver.FindAction("GoToMainMenu", throwIfNotFound: true);
        m_GameOver_YesButton = m_GameOver.FindAction("YesButton", throwIfNotFound: true);
        m_GameOver_NoButton = m_GameOver.FindAction("NoButton", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Actions.enabled, "This will cause a leak and performance issues, PlayerControls.Actions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Opening.enabled, "This will cause a leak and performance issues, PlayerControls.Opening.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Pause.enabled, "This will cause a leak and performance issues, PlayerControls.Pause.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GameOver.enabled, "This will cause a leak and performance issues, PlayerControls.GameOver.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private List<IActionsActions> m_ActionsActionsCallbackInterfaces = new List<IActionsActions>();
    private readonly InputAction m_Actions_Movement;
    private readonly InputAction m_Actions_Attack;
    private readonly InputAction m_Actions_DisplayHealthbar;
    private readonly InputAction m_Actions_StartPause;
    /// <summary>
    /// Provides access to input actions defined in input action map "Actions".
    /// </summary>
    public struct ActionsActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Actions/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_Actions_Movement;
        /// <summary>
        /// Provides access to the underlying input action "Actions/Attack".
        /// </summary>
        public InputAction @Attack => m_Wrapper.m_Actions_Attack;
        /// <summary>
        /// Provides access to the underlying input action "Actions/DisplayHealthbar".
        /// </summary>
        public InputAction @DisplayHealthbar => m_Wrapper.m_Actions_DisplayHealthbar;
        /// <summary>
        /// Provides access to the underlying input action "Actions/StartPause".
        /// </summary>
        public InputAction @StartPause => m_Wrapper.m_Actions_StartPause;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ActionsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ActionsActions" />
        public void AddCallbacks(IActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @DisplayHealthbar.started += instance.OnDisplayHealthbar;
            @DisplayHealthbar.performed += instance.OnDisplayHealthbar;
            @DisplayHealthbar.canceled += instance.OnDisplayHealthbar;
            @StartPause.started += instance.OnStartPause;
            @StartPause.performed += instance.OnStartPause;
            @StartPause.canceled += instance.OnStartPause;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ActionsActions" />
        private void UnregisterCallbacks(IActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @DisplayHealthbar.started -= instance.OnDisplayHealthbar;
            @DisplayHealthbar.performed -= instance.OnDisplayHealthbar;
            @DisplayHealthbar.canceled -= instance.OnDisplayHealthbar;
            @StartPause.started -= instance.OnStartPause;
            @StartPause.performed -= instance.OnStartPause;
            @StartPause.canceled -= instance.OnStartPause;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ActionsActions.UnregisterCallbacks(IActionsActions)" />.
        /// </summary>
        /// <seealso cref="ActionsActions.UnregisterCallbacks(IActionsActions)" />
        public void RemoveCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ActionsActions.AddCallbacks(IActionsActions)" />
        /// <seealso cref="ActionsActions.RemoveCallbacks(IActionsActions)" />
        /// <seealso cref="ActionsActions.UnregisterCallbacks(IActionsActions)" />
        public void SetCallbacks(IActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ActionsActions" /> instance referencing this action map.
    /// </summary>
    public ActionsActions @Actions => new ActionsActions(this);

    // Opening
    private readonly InputActionMap m_Opening;
    private List<IOpeningActions> m_OpeningActionsCallbackInterfaces = new List<IOpeningActions>();
    private readonly InputAction m_Opening_Continue;
    /// <summary>
    /// Provides access to input actions defined in input action map "Opening".
    /// </summary>
    public struct OpeningActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public OpeningActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Opening/Continue".
        /// </summary>
        public InputAction @Continue => m_Wrapper.m_Opening_Continue;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Opening; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="OpeningActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(OpeningActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="OpeningActions" />
        public void AddCallbacks(IOpeningActions instance)
        {
            if (instance == null || m_Wrapper.m_OpeningActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OpeningActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="OpeningActions" />
        private void UnregisterCallbacks(IOpeningActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="OpeningActions.UnregisterCallbacks(IOpeningActions)" />.
        /// </summary>
        /// <seealso cref="OpeningActions.UnregisterCallbacks(IOpeningActions)" />
        public void RemoveCallbacks(IOpeningActions instance)
        {
            if (m_Wrapper.m_OpeningActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="OpeningActions.AddCallbacks(IOpeningActions)" />
        /// <seealso cref="OpeningActions.RemoveCallbacks(IOpeningActions)" />
        /// <seealso cref="OpeningActions.UnregisterCallbacks(IOpeningActions)" />
        public void SetCallbacks(IOpeningActions instance)
        {
            foreach (var item in m_Wrapper.m_OpeningActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OpeningActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="OpeningActions" /> instance referencing this action map.
    /// </summary>
    public OpeningActions @Opening => new OpeningActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_StopPause;
    private readonly InputAction m_Pause_GoToMainMenu;
    private readonly InputAction m_Pause_YesButton;
    private readonly InputAction m_Pause_NoButton;
    private readonly InputAction m_Pause_GoToInstructions;
    private readonly InputAction m_Pause_BackFromInstructions;
    /// <summary>
    /// Provides access to input actions defined in input action map "Pause".
    /// </summary>
    public struct PauseActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PauseActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Pause/StopPause".
        /// </summary>
        public InputAction @StopPause => m_Wrapper.m_Pause_StopPause;
        /// <summary>
        /// Provides access to the underlying input action "Pause/GoToMainMenu".
        /// </summary>
        public InputAction @GoToMainMenu => m_Wrapper.m_Pause_GoToMainMenu;
        /// <summary>
        /// Provides access to the underlying input action "Pause/YesButton".
        /// </summary>
        public InputAction @YesButton => m_Wrapper.m_Pause_YesButton;
        /// <summary>
        /// Provides access to the underlying input action "Pause/NoButton".
        /// </summary>
        public InputAction @NoButton => m_Wrapper.m_Pause_NoButton;
        /// <summary>
        /// Provides access to the underlying input action "Pause/GoToInstructions".
        /// </summary>
        public InputAction @GoToInstructions => m_Wrapper.m_Pause_GoToInstructions;
        /// <summary>
        /// Provides access to the underlying input action "Pause/BackFromInstructions".
        /// </summary>
        public InputAction @BackFromInstructions => m_Wrapper.m_Pause_BackFromInstructions;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PauseActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PauseActions" />
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @StopPause.started += instance.OnStopPause;
            @StopPause.performed += instance.OnStopPause;
            @StopPause.canceled += instance.OnStopPause;
            @GoToMainMenu.started += instance.OnGoToMainMenu;
            @GoToMainMenu.performed += instance.OnGoToMainMenu;
            @GoToMainMenu.canceled += instance.OnGoToMainMenu;
            @YesButton.started += instance.OnYesButton;
            @YesButton.performed += instance.OnYesButton;
            @YesButton.canceled += instance.OnYesButton;
            @NoButton.started += instance.OnNoButton;
            @NoButton.performed += instance.OnNoButton;
            @NoButton.canceled += instance.OnNoButton;
            @GoToInstructions.started += instance.OnGoToInstructions;
            @GoToInstructions.performed += instance.OnGoToInstructions;
            @GoToInstructions.canceled += instance.OnGoToInstructions;
            @BackFromInstructions.started += instance.OnBackFromInstructions;
            @BackFromInstructions.performed += instance.OnBackFromInstructions;
            @BackFromInstructions.canceled += instance.OnBackFromInstructions;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PauseActions" />
        private void UnregisterCallbacks(IPauseActions instance)
        {
            @StopPause.started -= instance.OnStopPause;
            @StopPause.performed -= instance.OnStopPause;
            @StopPause.canceled -= instance.OnStopPause;
            @GoToMainMenu.started -= instance.OnGoToMainMenu;
            @GoToMainMenu.performed -= instance.OnGoToMainMenu;
            @GoToMainMenu.canceled -= instance.OnGoToMainMenu;
            @YesButton.started -= instance.OnYesButton;
            @YesButton.performed -= instance.OnYesButton;
            @YesButton.canceled -= instance.OnYesButton;
            @NoButton.started -= instance.OnNoButton;
            @NoButton.performed -= instance.OnNoButton;
            @NoButton.canceled -= instance.OnNoButton;
            @GoToInstructions.started -= instance.OnGoToInstructions;
            @GoToInstructions.performed -= instance.OnGoToInstructions;
            @GoToInstructions.canceled -= instance.OnGoToInstructions;
            @BackFromInstructions.started -= instance.OnBackFromInstructions;
            @BackFromInstructions.performed -= instance.OnBackFromInstructions;
            @BackFromInstructions.canceled -= instance.OnBackFromInstructions;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PauseActions.UnregisterCallbacks(IPauseActions)" />.
        /// </summary>
        /// <seealso cref="PauseActions.UnregisterCallbacks(IPauseActions)" />
        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PauseActions.AddCallbacks(IPauseActions)" />
        /// <seealso cref="PauseActions.RemoveCallbacks(IPauseActions)" />
        /// <seealso cref="PauseActions.UnregisterCallbacks(IPauseActions)" />
        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PauseActions" /> instance referencing this action map.
    /// </summary>
    public PauseActions @Pause => new PauseActions(this);

    // GameOver
    private readonly InputActionMap m_GameOver;
    private List<IGameOverActions> m_GameOverActionsCallbackInterfaces = new List<IGameOverActions>();
    private readonly InputAction m_GameOver_RestartLevel;
    private readonly InputAction m_GameOver_GoToMainMenu;
    private readonly InputAction m_GameOver_YesButton;
    private readonly InputAction m_GameOver_NoButton;
    /// <summary>
    /// Provides access to input actions defined in input action map "GameOver".
    /// </summary>
    public struct GameOverActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GameOverActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "GameOver/RestartLevel".
        /// </summary>
        public InputAction @RestartLevel => m_Wrapper.m_GameOver_RestartLevel;
        /// <summary>
        /// Provides access to the underlying input action "GameOver/GoToMainMenu".
        /// </summary>
        public InputAction @GoToMainMenu => m_Wrapper.m_GameOver_GoToMainMenu;
        /// <summary>
        /// Provides access to the underlying input action "GameOver/YesButton".
        /// </summary>
        public InputAction @YesButton => m_Wrapper.m_GameOver_YesButton;
        /// <summary>
        /// Provides access to the underlying input action "GameOver/NoButton".
        /// </summary>
        public InputAction @NoButton => m_Wrapper.m_GameOver_NoButton;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_GameOver; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GameOverActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GameOverActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GameOverActions" />
        public void AddCallbacks(IGameOverActions instance)
        {
            if (instance == null || m_Wrapper.m_GameOverActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameOverActionsCallbackInterfaces.Add(instance);
            @RestartLevel.started += instance.OnRestartLevel;
            @RestartLevel.performed += instance.OnRestartLevel;
            @RestartLevel.canceled += instance.OnRestartLevel;
            @GoToMainMenu.started += instance.OnGoToMainMenu;
            @GoToMainMenu.performed += instance.OnGoToMainMenu;
            @GoToMainMenu.canceled += instance.OnGoToMainMenu;
            @YesButton.started += instance.OnYesButton;
            @YesButton.performed += instance.OnYesButton;
            @YesButton.canceled += instance.OnYesButton;
            @NoButton.started += instance.OnNoButton;
            @NoButton.performed += instance.OnNoButton;
            @NoButton.canceled += instance.OnNoButton;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GameOverActions" />
        private void UnregisterCallbacks(IGameOverActions instance)
        {
            @RestartLevel.started -= instance.OnRestartLevel;
            @RestartLevel.performed -= instance.OnRestartLevel;
            @RestartLevel.canceled -= instance.OnRestartLevel;
            @GoToMainMenu.started -= instance.OnGoToMainMenu;
            @GoToMainMenu.performed -= instance.OnGoToMainMenu;
            @GoToMainMenu.canceled -= instance.OnGoToMainMenu;
            @YesButton.started -= instance.OnYesButton;
            @YesButton.performed -= instance.OnYesButton;
            @YesButton.canceled -= instance.OnYesButton;
            @NoButton.started -= instance.OnNoButton;
            @NoButton.performed -= instance.OnNoButton;
            @NoButton.canceled -= instance.OnNoButton;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GameOverActions.UnregisterCallbacks(IGameOverActions)" />.
        /// </summary>
        /// <seealso cref="GameOverActions.UnregisterCallbacks(IGameOverActions)" />
        public void RemoveCallbacks(IGameOverActions instance)
        {
            if (m_Wrapper.m_GameOverActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GameOverActions.AddCallbacks(IGameOverActions)" />
        /// <seealso cref="GameOverActions.RemoveCallbacks(IGameOverActions)" />
        /// <seealso cref="GameOverActions.UnregisterCallbacks(IGameOverActions)" />
        public void SetCallbacks(IGameOverActions instance)
        {
            foreach (var item in m_Wrapper.m_GameOverActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameOverActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GameOverActions" /> instance referencing this action map.
    /// </summary>
    public GameOverActions @GameOver => new GameOverActions(this);
    private int m_ActionsSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme ActionsScheme
    {
        get
        {
            if (m_ActionsSchemeIndex == -1) m_ActionsSchemeIndex = asset.FindControlSchemeIndex("Actions");
            return asset.controlSchemes[m_ActionsSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Actions" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ActionsActions.AddCallbacks(IActionsActions)" />
    /// <seealso cref="ActionsActions.RemoveCallbacks(IActionsActions)" />
    public interface IActionsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Attack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DisplayHealthbar" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDisplayHealthbar(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "StartPause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStartPause(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Opening" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="OpeningActions.AddCallbacks(IOpeningActions)" />
    /// <seealso cref="OpeningActions.RemoveCallbacks(IOpeningActions)" />
    public interface IOpeningActions
    {
        /// <summary>
        /// Method invoked when associated input action "Continue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnContinue(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Pause" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PauseActions.AddCallbacks(IPauseActions)" />
    /// <seealso cref="PauseActions.RemoveCallbacks(IPauseActions)" />
    public interface IPauseActions
    {
        /// <summary>
        /// Method invoked when associated input action "StopPause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStopPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GoToMainMenu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGoToMainMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "YesButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnYesButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NoButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNoButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GoToInstructions" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGoToInstructions(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BackFromInstructions" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBackFromInstructions(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "GameOver" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GameOverActions.AddCallbacks(IGameOverActions)" />
    /// <seealso cref="GameOverActions.RemoveCallbacks(IGameOverActions)" />
    public interface IGameOverActions
    {
        /// <summary>
        /// Method invoked when associated input action "RestartLevel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRestartLevel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GoToMainMenu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGoToMainMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "YesButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnYesButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NoButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNoButton(InputAction.CallbackContext context);
    }
}
